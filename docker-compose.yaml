# docker-compose.yml (Updated and Corrected)

services:
  db:
    image: postgres:16-alpine
    volumes:
      - pnm_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    # The 'healthcheck' is a good practice to ensure the DB is truly ready
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$DB_USER -d $$DB_NAME"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: always
    env_file:
      - ./.env

  migrate:
    build: .
    # This command now includes collectstatic as well.
    command: sh -c "python manage.py migrate --noinput && python manage.py collectstatic --noinput"
    volumes:
      - .:/app
      - static_data:/app/static
    env_file:
      - ./.env
    environment:
      - DJANGO_STATIC_ROOT=/app/static
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  web:
    build: .
    command: gunicorn pythonnetworkmonitor.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app
    env_file:
      - ./.env
    environment:
      - DJANGO_STATIC_ROOT=/app/static
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started


  nginx:
      build: ./nginx
#        context: .
#        dockerfile: Dockerfile.nginx
      ports:
        - "80:80"
      volumes:
        - static_data:/vol/static
      depends_on:
        - web


  worker:
    build: .
    command: celery -A pythonnetworkmonitor worker -l info
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      migrate:
        condition: service_completed_successfully

  celery-beat:
    build: .
    command: celery -A pythonnetworkmonitor beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      migrate:
        condition: service_completed_successfully

volumes:
  pnm_data:
  static_data: